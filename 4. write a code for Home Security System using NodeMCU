#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Replace with your Wi-Fi credentials and MQTT broker details
const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* mqtt_server = "your_MQTT_broker_IP";
const char* mqtt_user = "your_MQTT_username";
const char* mqtt_password = "your_MQTT_password";
const char* topic = "home/security";

// Define the pin numbers for the sensors
const int pirPin = D1;
const int gasPin = A0;

// Initialize the Wi-Fi and MQTT client
WiFiClient espClient;
PubSubClient client(espClient);

// Define the callback function for MQTT messages
void callback(char* topic, byte* message, unsigned int length) {
  // Print the received message
  Serial.print("Message received: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
  }
  Serial.println();
}

void setup() {
  // Initialize the serial communication and sensors
  Serial.begin(9600);
  pinMode(pirPin, INPUT);
  pinMode(gasPin, INPUT);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to Wi-Fi...");
  }

  // Connect to MQTT broker
  client.setServer(mqtt_server, 1883);
  while (!client.connected()) {
    if (client.connect("NodeMCU", mqtt_user, mqtt_password)) {
      Serial.println("Connected to MQTT broker");
      client.subscribe(topic);
    } else {
      Serial.println("Failed to connect to MQTT broker, retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void loop() {
  // Read the sensor values
  int pirValue = digitalRead(pirPin);
  int gasValue = analogRead(gasPin);

  // Publish the sensor values to MQTT broker
  String message = "PIR:" + String(pirValue) + ",Gas:" + String(gasValue);
  client.publish(topic, message.c_str());

  // Check if the PIR motion sensor is triggered
  if (pirValue == HIGH) {
    // Publish an alert message to MQTT broker
    client.publish(topic, "ALERT: Motion detected!");
  }

  // Check if the gas sensor detects a dangerous gas level
  if (gasValue > 500) {
    // Publish an alert message to MQTT broker
    client.publish(topic, "ALERT: Gas leak detected!");
  }

  // Check for incoming MQTT messages
  client.loop();
}
