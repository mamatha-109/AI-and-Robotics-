Here's an example code for a computer vision system that detects faces in real-time using OpenCV and a webcam:

import cv2

# Load the pre-trained face detection model
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Open a connection to the webcam
cap = cv2.VideoCapture(0)

while True:
    # Read a frame from the webcam
    ret, frame = cap.read()

    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale image
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    # Draw rectangles around the detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

    # Display the resulting image
    cv2.imshow('Face Detection', frame)

    # Wait for a key press to exit
    if cv2.waitKey(1) == ord('q'):
        break

# Release the webcam and close the window
cap.release()
cv2.destroyAllWindows()


This code uses OpenCV to load a pre-trained face detection model and opens a connection to the webcam. It then reads frames from the webcam, converts them to grayscale, and uses the face detection model to detect faces in the grayscale image. The code then draws rectangles around the detected faces and displays the resulting image in a window. The code waits for a key press to exit, and then releases the webcam and closes the window. 

You can modify this code to perform different computer vision tasks, such as object detection, image segmentation, optical character recognition, and more, by using different pre-trained models and algorithms available in OpenCV and other libraries.
